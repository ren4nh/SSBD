/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.tcc.principal;

import br.com.tcc.bean.Conexao;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//br.com.tcc.principal//Backup//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "BackupTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "br.com.tcc.principal.BackupTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_BackupAction",
        preferredID = "BackupTopComponent")
@Messages({
    "CTL_BackupAction=Backup",
    "CTL_BackupTopComponent=Backup",
    "HINT_BackupTopComponent=This is a Backup window"
})
public final class BackupTopComponent extends TopComponent {

    public BackupTopComponent() {
        initComponents();
        setName(Bundle.CTL_BackupTopComponent());
        setToolTipText(Bundle.HINT_BackupTopComponent());
        loadCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmbBase = new javax.swing.JComboBox();
        btBackup = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(BackupTopComponent.class, "BackupTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btBackup, org.openide.util.NbBundle.getMessage(BackupTopComponent.class, "BackupTopComponent.btBackup.text")); // NOI18N
        btBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBackupActionPerformed(evt);
            }
        });

        txtArea.setEditable(false);
        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane2.setViewportView(txtArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbBase, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btBackup)
                        .addGap(0, 133, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btBackup))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBackupActionPerformed
        if (cmbBase.getSelectedItem() != null) {
                Conexao c = (Conexao) cmbBase.getSelectedItem();
                JFileChooser j = new JFileChooser();
                j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                int resp = j.showOpenDialog(j);
                if (resp != JFileChooser.APPROVE_OPTION) {
                    return;
                }
                File salvo = j.getSelectedFile();
                if (!salvo.getAbsolutePath().endsWith(".backup")) {
                    salvo = new File(salvo.getAbsolutePath() + ".backup");
                }
                final List<String> comandos = new ArrayList<String>();
                comandos.add("C:\\Program Files\\PostgreSQL\\9.1\\bin\\pg_dump.exe");    // esse Ã© meu caminho    
                comandos.add("-i");
                comandos.add("-h");
                comandos.add(c.getServidor());     //ou  comandos.add("192.168.0.1");   
                comandos.add("-p");
                comandos.add(c.getPorta());
                comandos.add("-U");
                comandos.add(c.getUser());
                comandos.add("-F");
                comandos.add("c");
                comandos.add("-b");
                comandos.add("-v");
                comandos.add("-f");
                comandos.add(salvo.getAbsolutePath());   // eu utilizei meu C:\ e D:\ para os testes e gravei o backup com sucesso.    
                comandos.add(c.getBase());
                ProcessBuilder pb = new ProcessBuilder(comandos);
                pb.environment().put("PGPASSWORD", c.getSenha());      //Somente coloque sua senha           
                try {
                    final Process process = pb.start();
                    String resultado = "";
                    final BufferedReader r = new BufferedReader(
                            new InputStreamReader(process.getErrorStream()));
                    String line = r.readLine();
                    while (line != null) {
                        System.err.println(line);
                        txtArea.append(line + "\n");
                        line = r.readLine();
                    }
                    r.close();
                    process.waitFor();
                    process.destroy();
                    JOptionPane.showMessageDialog(null, "Backup realizado com sucesso.");
                } catch (IOException ex) {
                    ex.printStackTrace();
                } catch (InterruptedException ie) {
                    ie.printStackTrace();
                }
        }
    }//GEN-LAST:event_btBackupActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBackup;
    private javax.swing.JComboBox cmbBase;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtArea;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void loadCombo() {
        List<Conexao> lista = AbaConexaoTopComponent.lista;
        DefaultComboBoxModel dcm = (DefaultComboBoxModel) cmbBase.getModel();
        for (Conexao conexao : lista) {
            dcm.addElement(conexao);
        }

    }
}
